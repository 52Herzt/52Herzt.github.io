<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>5分钟部署一个Github Pages站点!</title>
    <url>/2024/11/15/wiki-githubPages-1/</url>
    <content><![CDATA[<h2 id="1-Github-Pages"><a href="#1-Github-Pages" class="headerlink" title="1. Github Pages"></a>1. Github Pages</h2><p>GitHub Pages 是一项静态站点托管服务，它直接从 GitHub 上的仓库获取 HTML、CSS 和 JavaScript 文件，（可选）通过构建过程运行文件，然后发布网站。 可以在 <a class="link"   href="https://github.com/collections/github-pages-examples" >GitHub Pages 示例集合 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 中看到 GitHub Pages 站点的示例。</p>
<h3 id="1-1-使用限制"><a href="#1-1-使用限制" class="headerlink" title="1.1 使用限制"></a>1.1 使用限制</h3><p>若要发布用户站点，必须创建个人帐户拥有的存储库，且存储库必须是公开的，私有不允许。 若要发布组织站点，必须创建组织帐户拥有的存储库。</p>
<p>除非使用的是自定义域，否则用户和组织站点在 http(s):&#x2F;&#x2F;<username>.github.io 或 http(s):&#x2F;&#x2F;<organization>.github.io 中可用。项目站点的源文件与其项目存储在同一个仓库中。</p>
<p>同时对于源存储库的大小以及带宽也有部分限制，此处不作过多阐述。</p>
<h2 id="2-创建-Github-Pages-站点"><a href="#2-创建-Github-Pages-站点" class="headerlink" title="2. 创建 Github Pages 站点"></a>2. 创建 Github Pages 站点</h2><h3 id="2-1-创建存储库，且仓库必须为公开"><a href="#2-1-创建存储库，且仓库必须为公开" class="headerlink" title="2.1 创建存储库，且仓库必须为公开"></a>2.1 创建存储库，且仓库必须为公开</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/image/wiki/githubpages_1_1.png"
                      alt="创建存储库"
                ></p>
<h3 id="2-2-将任意静态网页资源上传至存储库"><a href="#2-2-将任意静态网页资源上传至存储库" class="headerlink" title="2.2 将任意静态网页资源上传至存储库"></a>2.2 将任意静态网页资源上传至存储库</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/image/wiki/githubpages_1_2.png"
                      alt="上传项目"
                ></p>
<h3 id="2-3-进入-Settings-点击左侧的-Pages"><a href="#2-3-进入-Settings-点击左侧的-Pages" class="headerlink" title="2.3 进入 Settings 点击左侧的 Pages"></a>2.3 进入 Settings 点击左侧的 Pages</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/image/wiki/githubpages_1_3.png"
                      alt="进入设置"
                ></p>
<h3 id="2-4-设置构建分支为项目默认分支-main-master-root-根目录并保存"><a href="#2-4-设置构建分支为项目默认分支-main-master-root-根目录并保存" class="headerlink" title="2.4 设置构建分支为项目默认分支(main || master), root 根目录并保存"></a>2.4 设置构建分支为项目默认分支(main || master), root 根目录并保存</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/image/wiki/githubpages_1_4.png"
                      alt="设置分支"
                ></p>
<h3 id="2-5-设置构建完成后，回到设置-Pages-页面可以看到多出以下提示"><a href="#2-5-设置构建完成后，回到设置-Pages-页面可以看到多出以下提示" class="headerlink" title="2.5 设置构建完成后，回到设置 Pages 页面可以看到多出以下提示"></a>2.5 设置构建完成后，回到设置 Pages 页面可以看到多出以下提示</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/image/wiki/githubpages_1_5.png"
                      alt="查看页面"
                ><br>点击右侧按钮即可查看站点页面,至此一个 Github Pages 页面便部署好了,后续更新内容只需要提交文件至存储库即可自动构建更新。更多关于 <a class="link"   href="https://docs.github.com/zh/pages" >Github Pages 使用详情 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 可以查看官方文档。</p>
]]></content>
      <categories>
        <category>wiki</category>
      </categories>
      <tags>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2024/11/11/hello-world/</url>
    <content><![CDATA[<p>欢迎来到 <a href="/">17mc.top</a>!</p>
]]></content>
      <categories>
        <category>site</category>
      </categories>
      <tags>
        <tag>intro</tag>
      </tags>
  </entry>
  <entry>
    <title>5分钟封装一个主流社交平台工具函数!</title>
    <url>/2024/11/18/wiki-share%E5%87%BD%E6%95%B0%E5%B0%81%E8%A3%85/</url>
    <content><![CDATA[<h2 id="1-社交媒体分享"><a href="#1-社交媒体分享" class="headerlink" title="1. 社交媒体分享"></a>1. 社交媒体分享</h2><p>社交媒体分享是一个比较常见的需求,但是自己去一个个查找各大平台的分享 API 链接又比较麻烦,所以封装了真么一个工具函数来实现一键分享</p>
<h2 id="2-社交媒体-API-集合"><a href="#2-社交媒体-API-集合" class="headerlink" title="2. 社交媒体 API 集合"></a>2. 社交媒体 API 集合</h2><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> networks = &#123;</span><br><span class="line">  <span class="attr">email</span>: <span class="string">&quot;mailto:?subject=@t&amp;body=@u%0D%0A@d&quot;</span>,</span><br><span class="line">  <span class="attr">facebook</span>: <span class="string">&quot;https://www.facebook.com/sharer/sharer.php?u=@u&amp;title=@t&amp;description=@d&amp;quote=@q&amp;hashtag=@h&quot;</span>,</span><br><span class="line">  <span class="attr">sms</span>: <span class="string">&quot;sms:?body=@t%0D%0A@u%0D%0A@d&quot;</span>,</span><br><span class="line">  <span class="attr">telegram</span>: <span class="string">&quot;https://t.me/share/url?url=@u&amp;text=@t%0D%0A@d&quot;</span>,</span><br><span class="line">  <span class="attr">twitter</span>: <span class="string">&quot;https://twitter.com/intent/tweet?text=@t&amp;url=@u&amp;hashtags=@h@tu&quot;</span>,</span><br><span class="line">  <span class="attr">whatsapp</span>: <span class="string">&quot;https://api.whatsapp.com/send?text=@t%0D%0A@u%0D%0A@d&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 链接中的 &#x27;@*&#x27; 作为占位符后续使用正则替换为分享内容</span></span><br></pre></td></tr></table></figure></div>

<h2 id="3-工具函数封装"><a href="#3-工具函数封装" class="headerlink" title="3. 工具函数封装"></a>3. 工具函数封装</h2><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; network 需要分享的社交平台</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; url 分享链接</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; context 分享内容</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; option 特定平台可添加附加内容</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">share</span>(<span class="params"></span></span><br><span class="line"><span class="params">  network,</span></span><br><span class="line"><span class="params">  url,</span></span><br><span class="line"><span class="params">  context,</span></span><br><span class="line"><span class="params">  option = &#123;</span></span><br><span class="line"><span class="params">    twitterUser: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="params">    description: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="params">    quote: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="params">    encodedHashtags: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="params">    media: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="params">  &#125;</span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> ua = navigator.<span class="property">userAgent</span>.<span class="title function_">toLowerCase</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> key = network.<span class="title function_">toLowerCase</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * On IOS, SMS sharing link need a special formatting</span></span><br><span class="line"><span class="comment">   * Source: https://weblog.west-wind.com/posts/2013/Oct/09/Prefilling-an-SMS-on-Mobile-Devices-with-the-sms-Uri-Scheme#Body-only</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">if</span> (key === <span class="string">&quot;sms&quot;</span> &amp;&amp; (ua.<span class="title function_">indexOf</span>(<span class="string">&quot;iphone&quot;</span>) &gt; -<span class="number">1</span> || ua.<span class="title function_">indexOf</span>(<span class="string">&quot;ipad&quot;</span>) &gt; -<span class="number">1</span>)) &#123;</span><br><span class="line">    networks[key].<span class="title function_">replace</span>(<span class="string">&quot;:?&quot;</span>, <span class="string">&quot;:&amp;&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> link = networks[key];</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Twitter sharing shouldn&#x27;t include empty parameter</span></span><br><span class="line"><span class="comment">   * Source: https://github.com/nicolasbeauvais/vue-social-sharing/issues/143</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">if</span> (key === <span class="string">&quot;twitter&quot;</span>) &#123;</span><br><span class="line">    link = link.<span class="title function_">replace</span>(<span class="string">&quot;&amp;hashtags=@h&quot;</span>, <span class="string">&quot;&quot;</span>).<span class="title function_">replace</span>(<span class="string">&quot;@tu&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  link = link</span><br><span class="line">    .<span class="title function_">replace</span>(<span class="regexp">/@tu/g</span>, <span class="string">&quot;&amp;via=&quot;</span> + <span class="built_in">encodeURIComponent</span>(option.<span class="property">twitterUser</span>))</span><br><span class="line">    .<span class="title function_">replace</span>(<span class="regexp">/@u/g</span>, <span class="built_in">encodeURIComponent</span>(url))</span><br><span class="line">    .<span class="title function_">replace</span>(<span class="regexp">/@t/g</span>, <span class="built_in">encodeURIComponent</span>(context))</span><br><span class="line">    .<span class="title function_">replace</span>(<span class="regexp">/@d/g</span>, <span class="built_in">encodeURIComponent</span>(option.<span class="property">description</span>))</span><br><span class="line">    .<span class="title function_">replace</span>(<span class="regexp">/@q/g</span>, <span class="built_in">encodeURIComponent</span>(option.<span class="property">quote</span>))</span><br><span class="line">    .<span class="title function_">replace</span>(<span class="regexp">/@h/g</span>, option.<span class="property">encodedHashtags</span>)</span><br><span class="line">    .<span class="title function_">replace</span>(<span class="regexp">/@m/g</span>, <span class="built_in">encodeURIComponent</span>(option.<span class="property">media</span>));</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 如果是 IOS 在当前页打开,避免出现空白页签</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">if</span> (ua.<span class="title function_">indexOf</span>(<span class="string">&quot;iphone&quot;</span>) &gt; -<span class="number">1</span> || ua.<span class="title function_">indexOf</span>(<span class="string">&quot;ipad&quot;</span>) &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span> = link;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">open</span>(link, <span class="string">&quot;sharer-&quot;</span> + key, <span class="string">&quot;,height=426,width=626&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>关于特定平台的附加信息可查看对应 share 文档</p>
]]></content>
      <categories>
        <category>wiki</category>
      </categories>
      <tags>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>5分钟实现网站资源版本检测与更新!</title>
    <url>/2024/11/26/wiki-%E7%89%88%E6%9C%AC%E6%A3%80%E6%B5%8B/</url>
    <content><![CDATA[<h2 id="1-浏览器的缓存机制"><a href="#1-浏览器的缓存机制" class="headerlink" title="1. 浏览器的缓存机制"></a>1. 浏览器的缓存机制</h2><p>首先了解一下关于浏览器缓存网站资源的基本机制</p>
<h3 id="1-1-缓存类型分类"><a href="#1-1-缓存类型分类" class="headerlink" title="1.1 缓存类型分类"></a>1.1 缓存类型分类</h3><ul>
<li><p>强制缓存: 浏览器在发起请求前检查本地缓存中是否有满足条件的资源。如果有，则直接使用缓存资源，不再向服务器发起请求。主要依赖 HTTP 响应头中的 Expires 和 Cache-Control 字段。</p>
</li>
<li><p>协商缓存: 当强制缓存失效后，浏览器会携带缓存标识（如 Last-Modified 或 ETag）向服务器发起请求，由服务器根据缓存标识判断是否使用缓存。主要依赖 HTTP 请求头中的 If-Modified-Since 和 If-None-Match 字段，以及响应头中的 Last-Modified 和 ETag 字段。</p>
</li>
</ul>
<h3 id="1-2-缓存读取规则"><a href="#1-2-缓存读取规则" class="headerlink" title="1.2 缓存读取规则"></a>1.2 缓存读取规则</h3><p>浏览器会根据 HTTP 响应头中的 Cache-Control 和 Expires 字段来判断资源是否需要缓存以及缓存的有效期。Cache-Control 的优先级高于 Expires。如果 Cache-Control 指示不需要缓存，则不会进行缓存；如果指示需要缓存，则会根据 max-age 等参数确定缓存的有效期。</p>
<h3 id="1-3-浏览器的一些行为"><a href="#1-3-浏览器的一些行为" class="headerlink" title="1.3 浏览器的一些行为"></a>1.3 浏览器的一些行为</h3><p>浏览器在第一次请求资源后，会获取请求的结果及缓存标识。接下来，浏览器会根据第一次请求返回的响应头来确定缓存处理方式，分别是强制缓存和协商缓存。强制缓存直接使用本地缓存资源，而协商缓存则需要向服务器发送请求并由服务器判断是否使用缓存资源。</p>
<p>但是以上的缓存行为也导致了一些问题的产生，例如网站内容已经更新，但是用户访问依旧在使用缓存资源所产生用户行为差异问题，虽然可以通过服务器禁用缓存以及前端设置 meta 标签禁用缓存，但实际效果并不理想。</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Cache-Control&quot;</span> <span class="attr">content</span>=<span class="string">&quot;no-cache, no-store, must-revalidate&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Pragma&quot;</span> <span class="attr">content</span>=<span class="string">&quot;no-cache&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Expires&quot;</span> <span class="attr">content</span>=<span class="string">&quot;0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>禁用缓存的页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>这个页面禁用了缓存。<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h2 id="2-资源版本检测"><a href="#2-资源版本检测" class="headerlink" title="2. 资源版本检测"></a>2. 资源版本检测</h2><p>从以上问题出发，为了让每个用户在网站资源更新后都能收到更新提示以及强制刷新网站，可以通过服务器来记录一个资源版本标识，对比用户本地资源版本是否一致来判断是否有更新。</p>
<h3 id="2-1-记录版本"><a href="#2-1-记录版本" class="headerlink" title="2.1 记录版本"></a>2.1 记录版本</h3><p>新建一个 version.json 文件用于保存资源版本信息，放到项目 Utils&#x2F;public 文件下都可以</p>
<div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="comment">// 也可以使用时间戳来记录,仅作对比记录</span></span><br></pre></td></tr></table></figure></div>

<h3 id="2-2-检测版本"><a href="#2-2-检测版本" class="headerlink" title="2.2 检测版本"></a>2.2 检测版本</h3><p>将资源版本信息记录下来打包部署到网站上后，可以通过定时轮询或将版本信息携带到请求头中来检测版本更新，下面是一个简单请求示例:</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 新建一个 checkVersion.js 文件</span></span><br><span class="line"><span class="keyword">import</span> vs <span class="keyword">from</span> <span class="string">&quot;../../public/version.json&quot;</span>; <span class="comment">// 引入上一步封装的版本记录文件</span></span><br><span class="line"><span class="keyword">import</span> http <span class="keyword">from</span> <span class="string">&quot;./http&quot;</span>; <span class="comment">// 自己使用axios封装的请求类,使用自己的方式请求即可</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 封装检测函数,参数为一个回调函数,处理版本检测不一致的后续操作</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">checkVersion</span>(<span class="params">callback = <span class="literal">null</span></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> t = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>();</span><br><span class="line">  <span class="keyword">let</span> url = <span class="string">`<span class="subst">$&#123;mode&#125;</span>://<span class="subst">$&#123;<span class="variable language_">window</span>.location.host&#125;</span>/version.json?t=<span class="subst">$&#123;t&#125;</span>`</span>; <span class="comment">// 请求附带上时间戳</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> result = <span class="keyword">await</span> http.<span class="title function_">get</span>(url);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (result.<span class="property">version</span> !== vs.<span class="property">version</span>) &#123;</span><br><span class="line">    <span class="comment">// 用户本地资源版本与服务器版本不一致时调用回调函数,提示用户有更新或刷新网页</span></span><br><span class="line">    <span class="keyword">if</span> (callback) <span class="title function_">callback</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">checkVersion</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;有新版本更新! 请刷新网页&quot;</span>));</span><br></pre></td></tr></table></figure></div>

<h3 id="2-3-防止刷新使用缓存"><a href="#2-3-防止刷新使用缓存" class="headerlink" title="2.3 防止刷新使用缓存"></a>2.3 防止刷新使用缓存</h3><p>到了这一步，网站缓存的核心问题还是没有解决，那就是在版本检测到不一致时，触发网页刷新后可能用户还是会使用旧的缓存，所以在使用项目打包时，对输出的静态资源进行处理避免使用缓存，以下以 vue 项目为例，在 vue.config 中处理，webpack 打包设置方式类似:</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> timeStamp = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>();</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// 生产环境构建文件的目录</span></span><br><span class="line">  <span class="attr">outputDir</span>: <span class="string">&quot;dist&quot;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 打包输出 js 静态资源时，命名中拼接上时间戳，保证每次资源输出的唯一性</span></span><br><span class="line">  <span class="attr">configureWebpack</span>: <span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">    config.<span class="property">output</span> = &#123;</span><br><span class="line">      ...config.<span class="property">output</span>,</span><br><span class="line">      <span class="attr">filename</span>: <span class="string">`js/[name].<span class="subst">$&#123;timeStamp&#125;</span>.js`</span>,</span><br><span class="line">      <span class="attr">chunkFilename</span>: <span class="string">`js/[name].<span class="subst">$&#123;timeStamp&#125;</span>.js`</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 去掉map文件</span></span><br><span class="line">  <span class="attr">productionSourceMap</span>: <span class="literal">false</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>

<p>此时用户触发版本检测刷新网页过后就不会在使用缓存内容，只需要保证每次打包部署的资源版本不一致即可</p>
<h2 id="3-资源版本号自动更新"><a href="#3-资源版本号自动更新" class="headerlink" title="3. 资源版本号自动更新"></a>3. 资源版本号自动更新</h2><p>如果每次打包项目时都需要手动去修改 version 文件中的版本号有点过于繁琐，其实可以使用 node 来自动实现这一步</p>
<h3 id="3-1-自动累加版本函数封装"><a href="#3-1-自动累加版本函数封装" class="headerlink" title="3.1 自动累加版本函数封装"></a>3.1 自动累加版本函数封装</h3><p>新建一个 addVersion.js 文件，写入:</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回version的json数据</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getVersionJson</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> data = fs.<span class="title function_">readFileSync</span>(<span class="string">&quot;./public/version.json&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">JSON</span>.<span class="title function_">parse</span>(data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> versionData = <span class="title function_">getVersionJson</span>();</span><br><span class="line"><span class="keyword">let</span> arr = versionData.<span class="property">version</span>.<span class="title function_">split</span>(<span class="string">&quot;.&quot;</span>); <span class="comment">//切割后的版本号数组</span></span><br><span class="line"></span><br><span class="line">arr[<span class="number">2</span>] = <span class="built_in">parseInt</span>(arr[<span class="number">2</span>]) + <span class="number">1</span>;</span><br><span class="line">versionData.<span class="property">version</span> = arr.<span class="title function_">join</span>(<span class="string">&quot;.&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//用versionData覆盖version.json内容</span></span><br><span class="line">fs.<span class="title function_">writeFile</span>(<span class="string">&quot;./public/version.json&quot;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(versionData, <span class="literal">null</span>, <span class="string">&quot;\t&quot;</span>), <span class="function">() =&gt;</span> &#123;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;当前资源版本:&quot;</span> + versionData.<span class="property">version</span>);</span><br></pre></td></tr></table></figure></div>

<p>上述函数会将自动累加后的版本号写入到 version 文件当中，当然此处也可以使用时间戳来替代版本号来做记录对比</p>
<h3 id="3-2-执行打包前调用版本更新函数"><a href="#3-2-执行打包前调用版本更新函数" class="headerlink" title="3.2 执行打包前调用版本更新函数"></a>3.2 执行打包前调用版本更新函数</h3><p>在执行打包命令前，先通过 node 自动执行一次累加函数再执行打包项目，这样每次打包项目时都能自动更新资源版本号，下面以 vue 项目举例，在 package.json 文件中修改:</p>
<div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;serve&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vue-cli-service serve&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node ./src/utily/addVersion.js &amp;&amp; vue-cli-service build&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// addVersion 文件路径为你自己存放的相对路径</span></span><br><span class="line">    <span class="attr">&quot;lint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vue-cli-service lint&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure></div>

<p>以上步骤完成后，每次网站更新后都可以触发版本检测给予用户一定的更新反馈处理，刷新网站后，不再会有缓存问题同时也能提升用户体验。</p>
]]></content>
      <categories>
        <category>wiki</category>
      </categories>
      <tags>
        <tag>教程</tag>
      </tags>
  </entry>
</search>
